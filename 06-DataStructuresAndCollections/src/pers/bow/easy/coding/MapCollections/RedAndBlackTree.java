package pers.bow.easy.coding.MapCollections;
/*红黑树

1.树Tree
    高度：从某节点出发到叶节点为止，最长简单路径上边的条数，称为该节点的高度。
    深度：从根节点出发，到某节点边的条数，称为该节点的深度。

2.平衡二叉树
    树的左右高度差不能超过1
    任何往下递归的左子树与右子树，必须符合第一条性质。
    没有任何节点的空树或只有根节点的树也是平衡二叉树。
3.二叉查找（搜索）树
    对于任意节点，左子树上所有节点的值小于它，右子树上所有节点的值都大于它。
    遍历的方式（前、中、后序遍历）：
        ·在任何递归子树中，做节点一定在右节点之前先遍历
        ·前、中、后序，仅指根节点在遍历时的位置顺序
4.AVL树（平衡二叉查找树）
    在添加、删除节点时，调整：左、右旋。
5.红黑树
    保证从根节点到叶子节点的最长路径不超过最短路径的2倍，所以最坏运行时间为O(log n)。
    约束条件：
        ·节点只能是红色或黑色
        ·根节点必须是黑色
        ·所有NIL节点都是黑色的。（NIL，即叶子节点下挂的两个虚节点）
        ·一条路径上不能出现相邻的两个红色节点
        ·在任何递归子树内，根节点到叶子节点的所有路径上包含相同数目的黑色节点

        总结：有红必有黑，红红不相连。

6.红黑树和AVL树的比较









 */
public class RedAndBlackTree {
}
